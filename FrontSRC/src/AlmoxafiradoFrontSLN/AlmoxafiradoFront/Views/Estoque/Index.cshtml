<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Estoque com Codificação Automática</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f2f5;
        }

        .container {
            max-width: 900px;
            margin: 0 auto;
            background-color: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #34495e;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 5px 0;
            box-sizing: border-box;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            transition: border 0.3s;
        }

            input:focus {
                border-color: #3498db;
                outline: none;
            }

        button {
            padding: 12px 20px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: background-color 0.3s;
        }

            button:hover {
                background-color: #27ae60;
            }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 30px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        th, td {
            border: 1px solid #ecf0f1;
            padding: 15px;
            text-align: left;
        }

        th {
            background-color: #3498db;
            color: white;
            font-weight: 600;
        }

        tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        tr:hover {
            background-color: #e8f4fc;
        }

        .btn-remove {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }

            .btn-remove:hover {
                background-color: #c0392b;
            }

        .total-container {
            margin-top: 25px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 6px;
            text-align: right;
        }

        .total {
            font-weight: bold;
            font-size: 20px;
            color: #2c3e50;
        }

        .alert {
            padding: 12px;
            margin-bottom: 20px;
            border-radius: 6px;
            display: none;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .codigo-auto {
            color: #7f8c8d;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Controle de Estoque</h1>

        <div id="alert-success" class="alert alert-success"></div>
        <div id="alert-error" class="alert alert-error"></div>

        <form id="form-estoque">
            <div class="form-group">
                <label for="input-codigo">Código do Produto</label>
                <input type="text" id="input-codigo" placeholder="Deixe em branco para numeração automática" readonly>
                <small class="codigo-auto">O código será gerado automaticamente (1, 2, 3...)</small>
            </div>
            <div class="form-group">
                <label for="input-produto">Nome do Produto</label>
                <input type="text" id="input-produto" placeholder="Digite o nome do produto" required>
            </div>
            <div class="form-group">
                <label for="input-quantidade">Quantidade</label>
                <input type="number" id="input-quantidade" placeholder="Digite a quantidade" min="1" required>
            </div>
            <button type="submit" id="btn-adicionar">Adicionar Produto</button>
        </form>

        <table id="tabela-estoque">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>Produto</th>
                    <th>Quantidade</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody id="tabela-corpo">
                <!-- Itens serão adicionados aqui dinamicamente -->
            </tbody>
        </table>

        <div class="total-container">
            <span>Quantidade Total em Estoque: </span>
            <span id="total-quantidade" class="total">0</span>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elementos do DOM
            const form = document.getElementById('form-estoque');
            const inputCodigo = document.getElementById('input-codigo');
            const tabelaCorpo = document.getElementById('tabela-corpo');
            const totalQuantidade = document.getElementById('total-quantidade');
            const alertSuccess = document.getElementById('alert-success');
            const alertError = document.getElementById('alert-error');

            // Variáveis
            let estoqueTotal = 0;
            let estoqueItens = [];
            let proximoCodigo = 1;
            const ESTOQUE_KEY = 'controle_estoque_data_seq';

            // Mostrar alerta
            function showAlert(element, message, duration = 3000) {
                element.textContent = message;
                element.style.display = 'block';
                setTimeout(() => {
                    element.style.display = 'none';
                }, duration);
            }

            // Gerar próximo código sequencial
            function gerarProximoCodigo() {
                // Encontra o maior código atual
                const maiorCodigo = estoqueItens.reduce((max, item) => {
                    const codigoNum = parseInt(item.codigo);
                    return codigoNum > max ? codigoNum : max;
                }, 0);

                // Retorna o próximo código
                return maiorCodigo + 1;
            }

            // Atualizar o total
            function atualizarTotal() {
                totalQuantidade.textContent = estoqueTotal;
                salvarNoLocalStorage();
            }

            // Salvar dados no localStorage
            function salvarNoLocalStorage() {
                const dados = {
                    itens: estoqueItens,
                    total: estoqueTotal,
                    ultimoCodigo: proximoCodigo - 1 // Guarda o último código usado
                };
                localStorage.setItem(ESTOQUE_KEY, JSON.stringify(dados));
            }

            // Carregar dados do localStorage
            function carregarDoLocalStorage() {
                const dadosSalvos = localStorage.getItem(ESTOQUE_KEY);
                if (dadosSalvos) {
                    const dados = JSON.parse(dadosSalvos);
                    estoqueItens = dados.itens || [];
                    estoqueTotal = dados.total || 0;
                    proximoCodigo = (dados.ultimoCodigo || 0) + 1;

                    // Recriar a tabela com os dados salvos
                    estoqueItens.forEach(item => {
                        criarLinhaTabela(item.codigo, item.produto, item.quantidade);
                    });

                    atualizarTotal();
                }
            }

            // Criar linha na tabela
            function criarLinhaTabela(codigo, produto, quantidade) {
                const novaLinha = document.createElement('tr');
                novaLinha.innerHTML = `
                    <td>${codigo}</td>
                    <td>${produto}</td>
                    <td class="quantidade-item">${quantidade}</td>
                    <td><button class="btn-remove">Remover</button></td>
                `;
                tabelaCorpo.appendChild(novaLinha);

                // Adicionar evento de remoção
                novaLinha.querySelector('.btn-remove').addEventListener('click', function() {
                    const quantidadeRemover = parseInt(novaLinha.querySelector('.quantidade-item').textContent);
                    estoqueTotal -= quantidadeRemover;

                    // Remover item do array
                    estoqueItens = estoqueItens.filter(item => item.codigo !== codigo.toString());

                    novaLinha.remove();
                    atualizarTotal();
                    showAlert(alertSuccess, `Produto "${produto}" removido com sucesso!`);
                });
            }

            // Adicionar produto
            function adicionarProduto(codigo, produto, quantidade) {
                // Criar novo item
                const novoItem = {
                    codigo: codigo.toString(),
                    produto,
                    quantidade: parseInt(quantidade)
                };

                // Adicionar ao array e atualizar total
                estoqueItens.push(novoItem);
                estoqueTotal += novoItem.quantidade;

                // Criar linha na tabela
                criarLinhaTabela(codigo, produto, quantidade);

                // Atualizar total e salvar
                atualizarTotal();

                return true;
            }

            // Evento de submit do formulário
            form.addEventListener('submit', function(event) {
                event.preventDefault();

                const produto = document.getElementById('input-produto').value.trim();
                const quantidade = document.getElementById('input-quantidade').value;

                // Validações
                if (!produto) {
                    showAlert(alertError, 'Por favor, digite o nome do produto!');
                    return;
                }

                if (!quantidade || parseInt(quantidade) < 1) {
                    showAlert(alertError, 'Por favor, digite uma quantidade válida!');
                    return;
                }

                // Gerar código sequencial
                const codigo = proximoCodigo++;
                inputCodigo.value = codigo;

                // Adicionar produto
                if (adicionarProduto(codigo, produto, quantidade)) {
                    showAlert(alertSuccess, `Produto "${produto}" adicionado com código ${codigo}!`);
                    form.reset();
                    inputCodigo.value = ''; // Limpa para o próximo
                }
            });

            // Atualizar o campo de código quando a página carrega
            function atualizarCampoCodigo() {
                if (estoqueItens.length > 0) {
                    proximoCodigo = gerarProximoCodigo();
                }
                inputCodigo.value = proximoCodigo;
            }

            // Carregar dados ao iniciar
            carregarDoLocalStorage();
            atualizarCampoCodigo();
        });
    </script>
</body>
</html>